#!/usr/bin/env ruby

ENV["RACK_ENV"] ||= "production"

require "bundler"
Bundler.setup

require File.expand_path('../../lib/app.rb',  __FILE__)

c = QueueEntry.count
App.logger.info "[activitystreamer] starting up with #{c} " <<
  "entr#{c == 1 ? "y" : "ies"}"
STDOUT.flush
STDOUT.sync = true

busies = 0

begin
  while true do
    begin
      outstanding = QueueEntry.where("next_try_at <= ?", Time.now)
      ocount = outstanding.count
      outstanding.each_with_index do |qe,x|
        busies = 0

        begin
          App.logger.info "[#{x + 1}/#{ocount}] [q#{qe.id}] processing " <<
            "#{qe.action} (try #{qe.tries + 1})"
          qe.process!

        rescue SQLite3::BusyException => e
          raise e

        rescue => e
          App.logger.error "[q#{qe.id}] failed processing: #{e.message}\n" <<
            e.backtrace.map{|l| "   #{l}" }.join("\n")

          if App.exception_recipients && App.exception_recipients.any?
            Pony.mail(
              :to => App.exception_recipients,
              :subject => "[#{App.name}] activitystreamer #{e.class} " <<
                "exception (#{e.message[0, 50]})",
              :body => "#{e.message}\n#{qe.inspect}\n#{e.backtrace.join("\n")}"
            )
          end

          qe.fail!
          sleep 5
        end
      end

      sleep 1

    rescue SQLite3::BusyException
      busies += 1
      if busies > 30
        App.logger.error "database busy for a long time, bailing"
        exit 1
      end
      sleep 1
    end
  end

rescue => e
  App.logger.error "fatal crash: #{e.message}"
  App.logger.error e.backtrace.join("\n")
  exit 1
end
